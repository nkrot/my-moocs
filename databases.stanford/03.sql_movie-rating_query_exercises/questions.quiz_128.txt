
1. Find the titles of all movies directed by Steven Spielberg. 

select title
from Movie
where director = 'Steven Spielberg'

2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.

#ok
select distinct year
from Movie join Rating using(mID)
where stars = '4' or stars = '5'
order by year

# ok
select distinct year
from Movie
where mId in (select mID from Rating
  where stars = '4' or stars = '5')
order by year

3. Find the titles of all movies that have no ratings. 
!!! An unrated movie has not records in Raring table

select title
from Movie
where mID not in (select mID from Rating)

4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. 

select name
from Reviewer join Rating using(rID)
where ratingDate is null

5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. 

select name, title, stars, ratingDate
from Movie join Rating using(mID) join Reviewer using(rID)
order by name, title, stars

6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. 

# ok
select name, title
from (Reviewer
      join
        (select rID, mID
         from Rating R1 join Rating R2 using(rID, mID)
         where R1.ratingDate < R2.ratingDate
           and R1.stars < R2.stars)
        using(rID))
      join Movie using(mID)

# ok. 
# first build a table with all necessary data and then extract
select name, title
from Rating R1
     join Rating R2 using(rID)
     join Reviewer using(rID)
     join Movie using(mID)
where R1.rID = R2.rID
  and R1.mID = R2.mID
  and R1.stars < R2.stars
  and R1.ratingDate < R2.ratingDate

7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. 

# ok
select title, max(stars)
from Rating join Movie using(mID)
group by mID
order by title

# ok
select title, Scores.maxStars
from Movie
  join (select mID, max(stars) as maxStars
    from Rating
    group by mID) Scores
  using(mID)
order by title


8. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. 

# ok
select title, maxStars-minStars as starsSpread
from Movie join (select mID, min(stars) as minStars, max(stars) as maxStars
                 from Rating
                 group by mID) using(mID)
order by starsSpread desc, title


8. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 
# this question appears in the core problem set offered in the online session on class2go
=> see questions.quiz_136 in the extra set


9. Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) 

# ok
select avgEarly-avgLate
from (select avg(avgPerMovie) as avgEarly
      from (select avg(stars) as avgPerMovie
              from Rating
             where mID in (select mID from Movie where Year < 1980)
             group by mID)),
     (select avg(avgPerMovie) as avgLate
        from (select avg(stars) as avgPerMovie
                from Rating
               where mID in (select mID from Movie where Year > 1980)
               group by mID))

# ok.
select Early.avg - Late.avg
from
  (select avg(avgStars) as avg
    from Movie join (
    select mID, avg(stars) as avgStars
      from Rating
      group by mID) using(mID)
    where year < 1980) as Early,
  (select avg(avgStars) as avg
    from Movie join (
    select mID, avg(stars) as avgStars
      from Rating
      group by mID) using(mID)
    where year > 1980) as Late



9. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 
# this question appears in the core problem set offered in the online session on class2go
=> see questions.quiz_136 in the extra set
