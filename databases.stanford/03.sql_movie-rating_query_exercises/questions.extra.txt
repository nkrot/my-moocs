extra assignment
https://class.coursera.org/db/quiz/attempt?quiz_id=136

1. Find the names of all reviewers who rated Gone with the Wind. 

#ok, using subqueries
select name from Reviewer
where rID in (
  select rID from Rating
  where mID in (
    select mID from Movie
    where title = 'Gone with the Wind'))

# ok
select distinct name
from (Movie join Rating using(mID)) join Reviewer using(rID)
where title = 'Gone with the Wind'


2. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 

select name, title, stars
from (Reviewer join Movie
        on Reviewer.name = Movie.director)
        join Rating using(mID,rID)

3. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

select name from Reviewer
union
select title as name from Movie
order by name

4. Find the titles of all movies not reviewed by Chris Jackson. 

# ok
select title
from Movie
except 
select title
from (Movie join Rating using(mID)) join Reviewer using(rID)
            where reviewer.name = 'Chris Jackson'

# ok
select title from Movie
except
select title
from Movie join Rating using(mID)
where rID in (
select rID
from Reviewer
where name = 'Chris Jackson')

5. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.

select distinct R1.name, R2.name
from (select distinct rID, mID, name
           from Rating join Reviewer using(rID)) R1 
         join
         (select distinct rID, mID, name
          from Rating join Reviewer using(rID)) R2
         on R1.mID = R2.mID and R1.name < R2.name 

6. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.

select name, title,stars
from Rating join Movie using(mID) join Reviewer using(rID)
where stars = (select min(stars) from Rating)

7. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 

# ok
select distinct title, avgStars
from Movie join (
select mID, avg(stars) as avgStars
from Rating
group by mID) using(mID)
order by avgStars desc, title

# ok
select title, avg(stars) as avgRating
from Rating join Movie using(mID)
group by mID


8. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 

# ok
select distinct name
from Rating R1, Reviewer using(rID)
where 2 < (select count(*) from Rating R2
                 where R1.rID = R2.rID)

# ok
select name from Reviewer
where rID in (
  select rID
  from Rating
  group by rID
  having count(rID) > 2)

# ok
select name
from Rating join Reviewer using(rID)
group by rID
having count(*) > 2

# ok. this one does not use count and having
select distinct name
from ((Rating R1
      join Rating R2 using(rID))
      join Rating R3 using(rID))
      join Reviewer using(rID)
where (R1.mID <> R2.mID or R1.ratingDate <> R2.ratingDate)
  and (R2.mID <> R3.mID or R2.ratingDate <> R3.ratingDate)
  and (R1.mID <> R3.mID or R1.ratingDate <> R3.ratingDate)

9. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) 

#ok
select title, M.director
from Movie M, (select director, count(*) as count
  from Movie
  group by director) S
where M.director = S.director and S.count > 1
order by M.director, title;

# ok, slightly rewritten variant of the above
select title, M.director
from Movie M
where 1 < (select count(*) as count
  from Movie
  where director = M.director
  group by director)
order by M.director, title;

# ok. w/ count
select M1.title, M1.director
from Movie M1, Movie M2
where M1.director = M2.director and M1.mID <> M2.mID
order by M1.director, M1.title

# ok
select title, director
from Movie
where director in
  (select director
     from Movie
   group by director
   having count(*) > 1)
order by director, title

10. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)

# manually computed answer
# Ratings:
#  101: 2+4+3 = 9/3 = 3
#  103: 2+3   = 5/2 = 2.5
#  104: 2+3   =     = 2.5
#  106: 4+5   = 9/2 = 4.5    <-- max
#  107: 3+5   = 8/2 = 4
#  108: 4+2+4 = 10/3 = 3.333
# Movie:
#  106 Snow White

# ok, ugly. avoid recomputing avg(stars)
select title, avg(stars)
from Rating join Movie using(mID)
group by mID
having avg(stars) = (select max(avg)
                      from (select avg(stars) as avg
                              from Rating
                            group by mID))

# weird
# this query returns correct result when run on my host
# => Snow White 4.5
# but throught the web interface it returns incorrect
# => Raiders of the Lost Ark 4.5
# ??? the problem here is that it wont find *all* instances of highest-averaged movies 
select title, max(avg)
from (select *, avg(stars) as avg
        from Rating
       group by mID) join Movie using(mID)

# weird, same shit
select title, maxAvgStars
from Movie,
(select mID, max(avgStars) as maxAvgStars
 from (select *, avg(stars) as avgStars
         from Rating
         group by mID)) as Sel
where Movie.mID = Sel.mID


# ok, but too long
select M.title, bestRating.stars
from (select mID, avg(stars) as stars
        from Rating
       group by mID) avgRating,
     (select max(avg) as stars
        from (select avg(stars) as avg
                from Rating
               group by mID)) bestRating,
     Movie M
where avgRating.stars = bestRating.stars
  and M.mID = avgRating.mID

# ok
select title, avgStars
from (select mID, avg(stars) as avgStars
        from Rating
       group by mID)
     join Movie using(mID)
where avgStars = (select max(avg)
                    from (select avg(stars) as avg
                            from Rating
                           group by mID))

11. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 

# ok, looks ugly: TODO avoid recomputing average
select title, avg(stars)
from Rating join Movie using(mID)
group by mID
having avg(stars) = (select min(avg)
         from (select avg(stars) as avg
                  from Rating
                  group by mID))

#ok. non-refactored version of the above
select title, avg(stars)
from Rating join Movie using(mID)
group by mID
having avg(stars) = (select A.min
from (select min(avg) as min
         from (select avg(stars) as avg
                  from Rating
                  group by mID)) A)

12. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. 

# ok
select director, title, max(stars)
from Movie join Rating using(mID)
where director is not null
group by director

