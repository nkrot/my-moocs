# uses ../courses-noID.xml

q1. Return the title of the course with the largest enrollment.

# ok ++
doc("courses.xml")//Course[@Enrollment = max(//Course/data(@Enrollment))]/Title


q2. Return course numbers of courses that have the same title as some other course. (Hint: You might want to use the "preceding" and "following" navigation axes for this query, which were not covered in the video or our demo script; they match any preceding or following node, not just siblings.) 

# ok ++
doc("courses.xml")//Course[Title = preceding::*/Title or Title = following::*/Title]/data(@Number)


q3. Return the number (count) of courses that have no lecturers as instructors. 

# ok ++
count(doc("courses.xml")//Course[count(Instructors/Lecturer) = 0])


q4. Return titles of courses taught by the chair of a department. For this question, you may assume that all professors have distinct last names.

# ok++
doc("courses.xml")//Course[Instructors//Last_Name = //Chair//Last_Name]/Title

q5. Return titles of courses taught by a professor with the last name "Ng" but not by a professor with the last name "Thrun". 

# ok ++
doc("courses.xml")//Course[
   Instructors//Last_Name = "Ng"
   and count(Instructors//*[Last_Name = "Thrun"]) = 0
]/Title

# TODO: why doesn't  this work (empty result)?
doc("courses.xml")//Course[
   Instructors//Last_Name = "Ng"
   and count(Instructors//Last_Name = "Thrun") = 0
]/Title


q6. Return course numbers of courses that have a course taught by Eric Roberts as a prerequisite. 

# ok ++
doc("courses.xml")//Course[
   *//Prereq = //Course[Instructors//Last_Name = "Roberts"]/data(@Number)
]/data(@Number)

q7. Create a summary of CS classes: List all CS department courses in order of enrollment. For each course include only its Enrollment (as an attribute) and its Title (as a subelement). 

<Summary>
{for $course in doc("courses.xml")//Department[@Code = "CS"]//Course
order by $course/xs:int(data(@Enrollment))
return
         <Course  Enrollment="{ $course/data(@Enrollment) }">
              { $course/Title }
          </Course>}
</Summary>

q8. Return a "Professors" element that contains as subelements a listing of all professors in all departments, sorted by last name with each professor appearing once. The "Professor" subelements should have the same structure as in the original data. For this question, you may assume that all professors have distinct last names. Watch out -- the presence/absence of middle initials may require some special handling. 


# ok ++
<Professors>
  { for $ln in distinct-values( doc("courses.xml")//Professor//Last_Name )
    for $prof in (doc("courses.xml")//Professor[Last_Name = $ln])[1]
    order by $ln
    return $prof }
</Professors>

# ok ++
<Professors>
  { for $ln in distinct-values( doc("courses.xml")//Professor//Last_Name )
    order by $ln
    return (doc("courses.xml")//Professor[Last_Name = $ln])[1]
  }
</Professors>

q9. Expanding on the previous question, create an inverted course listing: Return an "Inverted_Course_Catalog" element that contains as subelements professors together with the courses they teach, sorted by last name. You may still assume that all professors have distinct last names. The "Professor" subelements should have the same structure as in the original data, with an additional single "Courses" subelement under Professor, containing a further "Course" subelement for each course number taught by that professor. Professors who do not teach any courses should have no Courses subelement at all. 

# ok ++
<Inverted_Course_Catalog>
  { for $ln in distinct-values( doc("courses.xml")//Professor//Last_Name )
    for $prof in (doc("courses.xml")//Professor[Last_Name = $ln])[1]
    let $courses := doc("courses.xml")//Course[*//Last_Name = $ln]
    order by $ln
    return 
         <Professor>
         { $prof/First_Name, $prof/Middle_Initial, $prof/Last_Name,
           if (count($courses) > 0)
            then <Courses>
                  { for $c in $courses return <Course> { $c/data(@Number) } </Course>}
                  </Courses>
            else () }
         </Professor>
 }
</Inverted_Course_Catalog>
