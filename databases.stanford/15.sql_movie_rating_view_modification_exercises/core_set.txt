You've started a new movie-rating website, and you've been collecting data on reviewers' ratings of various movies. Here's the schema: 

Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mIDa number of stars rating (1-5) on a certain ratingDate. 

In addition to the base tables, you've created three views: 

View LateRating contains movie ratings after January 20, 2011. The view contains the movie ID, movie title, number of stars, and rating date. 

create view LateRating as 
  select distinct R.mID, title, stars, ratingDate 
  from Rating R, Movie M 
  where R.mID = M.mID 
  and ratingDate > '2011-01-20' 

View HighlyRated contains movies with at least one rating above 3 stars. The view contains the movie ID and movie title. 

create view HighlyRated as 
  select mID, title 
  from Movie 
  where mID in (select mID from Rating where stars > 3) 

View NoRating contains movies with no ratings in the database. The view contains the movie ID and movie title. 

create view NoRating as 
  select mID, title 
  from Movie 
  where mID not in (select mID from Rating) 

######################################################################

q1. Write an instead-of trigger that enables updates to the title attribute of view LateRating. 

Policy: Updates to attribute title in LateRating should update Movie.title for the corresponding movie. (You may assume attribute mID is a key for table Movie.) Make sure the mID attribute of view LateRating has not also been updated -- if it has been updated, don't make any changes. Don't worry about updates to stars or ratingDate.

# ok ++
create trigger LateRating_UpdateTitle
instead of update of title on LateRating
for each row
begin
  update Movie
  set title=New.title
  where mID=New.mID;
end;


q2. Write an instead-of trigger that enables updates to the stars attribute of view LateRating. 

Policy: Updates to attribute stars in LateRating should update Rating.stars for the corresponding movie rating. (You may assume attributes [mID,ratingDate] together are a key for table Rating.) Make sure the mID and ratingDate attributes of view LateRating have not also been updated -- if either one has been updated, don't make any changes. Don't worry about updates to title.

# ok++
create trigger LateRating_UpdateStars
instead of update on LateRating
for each row
begin
  update Rating
  set stars=New.stars
  where mID=New.mID and ratingDate=New.ratingDate;
end;


q3. Write an instead-of trigger that enables updates to the mID attribute of view LateRating. 

Policy: Updates to attribute mID in LateRating should update Movie.mID and Rating.mID for the corresponding movie. Update all Rating tuples with the old mID, not just the ones contributing to the view. Don't worry about updates to title, stars, or ratingDate.

# ok ++
create trigger LateRating_UpdateMID
instead of update of mID on LateRating
for each row
begin
		update Movie
		set mID=New.mID
		where mID=Old.mID;

		update Rating
		set mID=New.mID
		where mID=Old.mID;
end;


q4. Write an instead-of trigger that enables deletions from view HighlyRated. 

Policy: Deletions from view HighlyRated should delete all ratings for the corresponding movie that have stars > 3.

# ok++
create trigger HighlyRated_Delete
instead of delete on HighlyRated
for each row
begin
		delete from Rating
		where mID = Old.mID and stars > 3;
end;

q5. Write an instead-of trigger that enables deletions from view HighlyRated. 

Policy: Deletions from view HighlyRated should update all ratings for the corresponding movie that have stars > 3 so they have stars = 3.

# ok ++
create trigger HighlyRated_Downgrade
instead of delete on HighlyRated
begin
		update Rating
		set stars=3
		where mID=Old.mID and stars > 3;
end;

######################################################################
# EXTRA PRACTICE EXERCISES
######################################################################

q1. Write an instead-of trigger that enables deletions from view NoRating. 

Policy: Deletions from view NoRating should delete the corresponding movie from the Movie table.

# ok ++
# TODO: why corresponding records in Rating are not deleted
create trigger NoRating_Delete
instead of delete on NoRating
for each row
begin
		delete from Movie
		where mID = Old.mID;
end;

q2. Write an instead-of trigger that enables deletions from view NoRating. 

Policy: Deletions from view NoRating should add a new rating for the deleted movie with rID = 201, stars = 1, and NULL ratingDate.

# ok +++
create trigger NoRating_Delete
instead of delete on NoRating
for each row
begin
		insert into Rating
		values('201', Old.mID, 1, NULL);
end;

######################################################################
# CHALLENGE LEVEL
######################################################################

q1. Write a single instead-of trigger that enables simultaneous updates to attributes mID, title, and/or stars in view LateRating. Combine the view-update policies of the questions 1-3 in the core set, with the exception that mID may now be updated. Make sure the ratingDate attribute of view LateRating has not also been updated -- if it has been updated, don't make any changes.

# ok++
create trigger LateRating_Multiupdate
instead of update of mid, title, stars on LateRating
for each row
when Old.ratingDate = New.ratingDate
begin
		update Movie
		   set title=New.title, mID=New.mID
		where mID=Old.mID 
		  and (title <> New.title or mID <> New.mID);

		update Rating
		   set stars=New.stars
		where mID=Old.mID and ratingDate=Old.ratingDate
		  and stars <> New.stars;

		update Rating
		   set mID=New.mID
		where mID=Old.mID /*and ratingDate=Old.ratingDate*/
		  and mID <> New.mID;
end;


q2. Write an instead-of trigger that enables insertions into view HighlyRated. 

Policy: An insertion should be accepted only when the (mID,title) pair already exists in the Movie table. (Otherwise, do nothing.) Insertions into view HighlyRated should add a new rating for the inserted movie with rID = 201, stars = 5, and NULL ratingDate.

# ok +++
create trigger HighlyRated_Insert
instead of insert on HighlyRated
for each row # works w/o this line as well
when New.mID in (select mID from Movie where title = New.title)
begin
		insert into Rating
		values('201', New.mID, 5, NULL);
end;


q3. Write an instead-of trigger that enables insertions into view NoRating. 

Policy: An insertion should be accepted only when the (mID,title) pair already exists in the Movie table. (Otherwise, do nothing.) Insertions into view NoRating should delete all ratings for the corresponding movie.

create trigger NoRating_Insert
instead of insert on NoRating
for each row
when New.mID in (select mID from Movie where title = New.title)
begin
		delete from Rating
		where mID = New.mID;
end;
