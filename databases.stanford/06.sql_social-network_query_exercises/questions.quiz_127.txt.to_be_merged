https://class.coursera.org/db/quiz/attempt?quiz_id=127

1. Find the names of all students who are friends with someone named Gabriel. 

# ok
select name
from Highschooler
where id in (
 select id2
  from Highschooler, Friend
  where Highschooler.name = "Gabriel"
    and Highschooler.id = Friend.id1
 union 
 select id1
  from Highschooler, Friend
  where Highschooler.name = "Gabriel"
    and Highschooler.id = Friend.id2
 )


2. For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. 

# ok
select H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1, Highschooler H2
where (H1.grade-H2.grade)>=2
  and exists (select * from Likes where H1.id = id1 and H2.id = id2)

3. For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order.

# ok
select H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1, Highschooler H2,
(select L1.id1, L1.id2
from Likes L1, Likes L2
where L1.id1 = L2.id2
  and  L1.id2 = L2.id1) ML
where H1.name < H2.name
 and H1.id = ML.id1
 and H2.id = ML.id2


4. Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade.

# ok
select name, grade
from Highschooler H
where not exists
  (select * from Likes
   where id1 = H.id or id2 = H.id)
order by grade, name

5. For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 

# ok
select H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1, Highschooler H2,
(select *
from Likes
where id2 not in (select id1 from Likes)) L
where H1.id = L.id1 and H2.id = L.id2


6. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. 

# ok
# TODO: this is ugly
select H1.name, H1.grade
from Highschooler H1, Highschooler H2, Friend F
where H1.id = F.id1 
    and H2.id = F.id2
    and H1.grade = H2.grade
except
select  H1.name, H1.grade
from Highschooler H1, Highschooler H2, Friend F
where H1.id = F.id1 
    and H2.id = F.id2
    and H1.grade <> H2.grade
order by H1.grade, H1.name

7. For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. 

Expected Query Result:
Andrew 	10 	Cassandra 	9 	Gabriel 	9
Austin 	11 	Jordan 	12 	Andrew 	10
Austin 	11 	Jordan 	12 	Kyle 	12

# &&&
# unfinished. this finds: each student A who likes a student B where the two are not friends
select *
from Likes L
where not exists
   (select * from Friend F
    where L.id1 = F.id1 and L.id2 = F.id2
       or L.id1 = F.id2 and L.id2 = F.id1) Shy


(select *
from 
  (select F1.id1, F1.id2, F2.id2 as CommonFriend
     from Friend F1, Friend F2
     where F1.id2 = F2.id1 and  F1.id1 <> F2.id2
   union
     select F1.id1, F1.id2, F2.id1 as CommonFriend
     from Friend F1, Friend F2
   where  F1.id1 = F2.id2 and  F1.id2 <> F2.id1)) ChainFriend

8. Find the difference between the number of students in the school and the number of different first names. 

# ok
select StudentCount-NameCount
from
    (select count(distinct name) as NameCount
        from Highschooler),
    (select count(name) as StudentCount
        from Highschooler)

9. Find the name and grade of all students who are liked by more than one other student. 

# ok
select name, grade
from Highschooler
where id in (
select id2
from Likes
group by id2
having count(*) > 1)
