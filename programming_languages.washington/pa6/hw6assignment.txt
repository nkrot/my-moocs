# University of Washington, Programming Languages, Homework 6, hw6runner.rb

# This is the only file you turn in, so do not modify the other files as
# part of your solution.

class MyTetris < Tetris

  def set_board
    @canvas = TetrisCanvas.new
    @board = MyBoard.new(self)  # changed
    @canvas.place(@board.block_size * @board.num_rows + 3,
                  @board.block_size * @board.num_columns + 6, 24, 80)
    @board.draw
  end

  def key_bindings
    super
    @root.bind('u', proc {@board.rotate_180_degrees})
    @root.bind('c', proc {@board.cheat})
  end
end

######################################################################

class MyPiece < Piece
  # The constant All_My_Pieces should be declared here
  All_My_Pieces = Piece::All_Pieces + \
  [
   # truck cabin, has 4 rotations
   rotations([[0,0],[1,0],[2,0],[0,1],[1,1]]),
   # 5-points long rod, has 2 rotations only
   [[[0, 0], [-1, 0], [-2,0], [1, 0], [2, 0]],
    [[0, 0], [0, -1], [0,-2], [0, 1], [0, 2]]],
   # angle |_, has 4 rotations
   rotations([[0,0], [0,1], [1,0]])
  ]

  Cheat_Piece = [[[0,0]]]

  def self.next_piece (board, cheating=false)
    piece = cheating ? Cheat_Piece : All_My_Pieces.sample  
    MyPiece.new(piece, board)
  end

  # returns the number of points (boxes) the piece has
  def size
    @all_rotations.first.length
  end
end

######################################################################

class MyBoard < Board
  # your enhancements here

  def initialize(game)
    super
    # the parent constructor has already set this variable to an object
    # of Piece. But we want it to be MyPiece, so recompute it here
    @current_block = MyPiece.next_piece(self)
    @cheating = false
  end

  def rotate_180_degrees
    rotate_clockwise
    rotate_clockwise
  end

  # go into cheating mode if possible
  def cheat
    if @score >= 100 && !@cheating
      @cheating = true
      @score -= 100
    end
  end

  def next_piece
    @current_block = MyPiece.next_piece(self, @cheating)
    @current_pos = nil
    @cheating = false
  end

  # gets the information from the current piece about where it is and uses this
  # to store the piece on the board itself.  Then calls remove_filled.
  def store_current
    locations = @current_block.current_rotation
    displacement = @current_block.position
    (0...@current_block.size).each {|index|
      current = locations[index];
      @grid[current[1]+displacement[1]][current[0]+displacement[0]] = 
      @current_pos[index]
    }
    remove_filled
    @delay = [@delay - 2, 80].max
  end

end
