#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 68 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
41 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 24
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1000 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 186
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname list-"
 #"operations) (read-case-sensitive #t) (teachpacks ()) (htdp-settings "
 #"#(#t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 59 29 1 #"\n"
0 7          85 59           0 0           0 13 0 2 29 1 #"\n"
0 0 14 3 9 #"implement"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 6 #"number"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 10 #"operations"
0 0 2 29 1 #"\n"
0           0 0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 27 #";; (listof X) -> (listof X)"
0 0 59 29 1 #"\n"
0 0 17 3 19 #";; reverse the list"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-reverse"
0 0 62 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-reverse"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-reverse"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-reverse"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 62 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #"))"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"4"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 34 #";(define (list-reverse l) l) ;stub"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-reverse"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 62 3 1 #" "
0 0 14 3 4 #"cons"
0 0 62 3 1 #" "
0 0 14 3 5 #"empty"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 26 #";; (listof X) X -> Boolean"
0 0 59 29 1 #"\n"
0 0 17 3 41 #";; check if the list contains given value"
0 0 59 29 1 #"\n"
0 0 17 3 6 #";; !!!"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 31 #";; (listof X) X Y -> (listof X)"
0 0 59 29 1 #"\n"
0 0 17 3 37 #";; replace X with Y in the given list"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-replace"
0 0 62 3 1 #" "
0 0 14 3 5 #"empty"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-replace"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-replace"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 62 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 40 #";(define (list-replace l v1 v2) l) ;stub"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-replace"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 62 3 1 #" "
0 0 14 3 2 #"v1"
0 0 62 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 62 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"replace-item"
0 0 62 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 62 3 1 #" "
0 0 14 3 2 #"v1"
0 0 62 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 14 3 2 #"v2"
0 0 62 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 3 #"))]"
0 0 62 29 1 #"\n"
0 0 62 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 62 3 1 #" "
0 0 14 3 12 #"replace-item"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")))"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"list-replace-naive"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 62 3 1 #" "
0 0 14 3 2 #"v1"
0 0 62 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 63 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 63 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 63 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #"]"
0 0 63 29 1 #"\n"
0 0 63 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 63 3 1 #" "
0 0 14 3 2 #"v1"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 63 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 63 29 1 #"\n"
0 0 63 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 63 3 1 #" "
0 0 14 3 2 #"v2"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-replace"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 63 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 63 3 1 #" "
0 0 14 3 2 #"v1"
0 0 63 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 3 #"))]"
0 0 63 29 1 #"\n"
0 0 63 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 63 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 63 29 1 #"\n"
0 0 63 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 12 #"list-replace"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 63 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 63 3 1 #" "
0 0 14 3 2 #"v1"
0 0 63 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 5 #"))]))"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 26 #";; (listof X) X -> Integer"
0 0 59 29 1 #"\n"
0 0 17 3 78
(
 #";; search the given list for the given value and return its position"
 #" (starting"
) 0 0 59 29 1 #"\n"
0 0 17 3 28 #";; from 1) or 0 if not found"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 14 3 5 #"empty"
0 0 62 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 2 #"10"
0 0 62 3 1 #" "
0 0 20 3 2 #"20"
0 0 62 3 1 #" "
0 0 20 3 2 #"30"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 2 #"10"
0 0 62 3 1 #" "
0 0 20 3 2 #"20"
0 0 62 3 1 #" "
0 0 20 3 2 #"30"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 2 #"10"
0 0 62 3 1 #" "
0 0 20 3 2 #"20"
0 0 62 3 1 #" "
0 0 20 3 2 #"30"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 2 #"30"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 17 3 30 #"; find first unique occurrence"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 17 3 18 #"; find last unique"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 62 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 59 3 1 #" "
0 0 17 3 32 #"; find first in repeating values"
0 0 67 29 1 #"\n"
0 0 67 29 1 #"\n"
0 0 67 29 1 #"\n"
0 0 17 3 34 #";(define (list-index l v) 0) ;stub"
0 0 67 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 7 #";; ugly"
0 0 67 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"list-index"
0 0 62 3 1 #" "
0 0 14 3 3 #"lst"
0 0 62 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 62 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"count"
0 0 62 3 1 #" "
0 0 14 3 2 #"lv"
0 0 62 3 1 #" "
0 0 14 3 3 #"idx"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 62 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 62 3 1 #" "
0 0 19 3 6 #"\"fake\""
0 0 62 3 1 #" "
0 0 14 3 2 #"lv"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 62 3 1 #" "
0 0 14 3 3 #"idx"
0 0 62 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 14 3 3 #"idx"
0 0 62 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #")]"
0 0 62 29 1 #"\n"
0 0 62 3 18 #"                  "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 62 3 1 #" "
0 0 14 3 3 #"idx"
0 0 62 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 14 3 3 #"idx"
0 0 22 3 1 #"]"
0 0 62 29 1 #"\n"
0 0 62 3 18 #"                  "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 62 3 1 #" "
0 0 14 3 3 #"val"
0 0 62 3 1 #" "
0 0 14 3 2 #"lv"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 62 3 1 #" "
0 0 14 3 3 #"idx"
0 0 22 3 3 #"))]"
0 0 62 29 1 #"\n"
0 0 62 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 62 3 1 #" "
0 0 14 3 3 #"idx"
0 0 22 3 5 #")]))]"
0 0 62 29 1 #"\n"
0 0 62 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 62 3 1 #" "
0 0 14 3 5 #"count"
0 0 62 3 1 #" "
0 0 20 3 1 #"0"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 62 3 1 #" "
0 0 14 3 3 #"lst"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 19 3 6 #"\"fake\""
0 0 22 3 5 #")))))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"list-index-naive"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 62 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 63 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-and-count"
0 0 63 3 1 #" "
0 0 14 3 3 #"lst"
0 0 63 3 1 #" "
0 0 14 3 3 #"acc"
0 0 22 3 1 #")"
0 0 63 29 1 #"\n"
0 0 63 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 63 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 63 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 63 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #"]"
0 0 63 29 1 #"\n"
0 0 63 3 18 #"                  "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 63 3 1 #" "
0 0 14 3 1 #"v"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 63 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 63 3 1 #" "
0 0 14 3 3 #"acc"
0 0 22 3 2 #")]"
0 0 63 29 1 #"\n"
0 0 63 3 18 #"                  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-and-count"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 63 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 63 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 63 3 1 #" "
0 0 14 3 3 #"acc"
0 0 22 3 6 #"))]))]"
0 0 63 29 1 #"\n"
0 0 63 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 14 #"find-and-count"
0 0 63 3 1 #" "
0 0 14 3 1 #"l"
0 0 63 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 65 29 1 #"\n"
0 0 65 29 1 #"\n"
0 7         823 59           0 0           0 136 0 2 3 1 #" "
0 0 14 3 4 #"from"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 13 #"documentation"
0 0 2 29 1 #"\n"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 14 3 5 #"foldl"
0 0 2 3 1 #" "
0 0 14 3 1 #":"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"->"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"listof"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 2 #"->"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 2 3 1 #" "
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 14 3 4 #"base"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 3 #"x-1"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 2 3 1 #" "
0 0 14 3 3 #"x-n"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 14 3 3 #"x-n"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 14 3 3 #"x-1"
0 0 2 3 1 #" "
0 0 14 3 4 #"base"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #":"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"X"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 14 3 2 #"->"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"listof"
0 0 2 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 2 #"->"
0 0 2 3 1 #" "
0 0 14 3 1 #"Y"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 2 3 1 #" "
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 14 3 4 #"base"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 3 #"x-1"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 2 3 1 #" "
0 0 14 3 3 #"x-n"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 14 3 3 #"x-1"
0 0 2 3 1 #" "
0 0 14 3 3 #"..."
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 14 3 3 #"x-n"
0 0 2 3 1 #" "
0 0 14 3 4 #"base"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0           0 0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 37 #";; (listof Number) -> (listof Number)"
0 0 59 29 1 #"\n"
0 0 17 3 78
(
 #";; produce a list in which each original element is multiplied by it"
 #"s position"
) 0 0 59 29 1 #"\n"
0 0 17 3 31 #";; in the list, starting from 1"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"test-foldl"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 2 #"10"
0 0 62 3 1 #" "
0 0 20 3 2 #"20"
0 0 62 3 1 #" "
0 0 20 3 2 #"30"
0 0 22 3 2 #"))"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 2 #"10"
0 0 62 3 1 #" "
0 0 20 3 2 #"40"
0 0 62 3 1 #" "
0 0 20 3 2 #"90"
0 0 22 3 2 #"))"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"test-foldl"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 62 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"incr"
0 0 62 3 1 #" "
0 0 14 3 2 #"lv"
0 0 62 3 1 #" "
0 0 14 3 3 #"acc"
0 0 22 3 1 #")"
0 0 62 29 1 #"\n"
0 0 62 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 62 3 1 #" "
0 0 14 3 3 #"acc"
0 0 22 3 2 #"))"
0 0 62 29 1 #"\n"
0 0 62 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 62 3 1 #" "
0 0 14 3 2 #"lv"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 62 3 1 #" "
0 0 14 3 3 #"acc"
0 0 22 3 2 #"))"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 62 3 1 #" "
0 0 14 3 3 #"acc"
0 0 22 3 5 #"))))]"
0 0 62 29 1 #"\n"
0 0 62 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 62 3 1 #" "
0 0 14 3 4 #"incr"
0 0 62 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 62 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 62 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 5 #")))))"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 29 #";(test-foldl (list 10 20 30))"
0 0 59 29 1 #"\n"
0 0 17 3 27 #";(incr 3 (incr 2 (incr 1)))"
0 0 59 29 1 #"\n"
0 0 17 3 27 #";(incr 3 (incr 2 (add1 0)))"
0 0 59 29 1 #"\n"
0 0 17 3 18 #";(incr 3 (add1 3))"
0 0 59 29 1 #"\n"
0 0 17 3 11 #";(incr 3 4)"
0 0 59 29 1 #"\n"
0 0 17 3 5 #";=>15"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 67
#";; find the position of the first positive number in the given list"
0 0 59 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"check-expect"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 13 #"find-positive"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 1 #" "
0 0 17 3 2 #"-2"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #"))"
0 0 17 3 3 #" 3)"
0 0 59 29 1 #"\n"
0 0 59 29 1 #"\n"
0 0 17 3 59
#";; NOTE: ormap expects a function that accepts one argument"
0 0 59 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 13 #"find-positive"
0 0 17 3 3 #" l)"
0 0 62 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 17 3 1 #"("
0 0 17 3 5 #"local"
0 0 17 3 1 #" "
0 0 17 3 2 #"[("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 2 #"fp"
0 0 17 3 3 #" v)"
0 0 62 29 1 #"\n"
0 0 17 3 13 #";            "
0 0 17 3 1 #"("
0 0 17 3 9 #"positive?"
0 0 17 3 5 #" v))]"
0 0 62 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 17 3 1 #"("
0 0 17 3 1 #"o"
0 0 17 3 1 #"r"
0 0 17 3 1 #"m"
0 0 17 3 1 #"a"
0 0 17 3 1 #"p"
0 0 17 3 1 #" "
0 0 17 3 7 #"fp l)))"
0 0 59 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 59 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"alt-fold"
0 0 4 3 1 #" "
0 0 14 3 4 #"comb"
0 0 4 3 1 #" "
0 0 14 3 5 #"contr"
0 0 4 3 1 #" "
0 0 14 3 4 #"base"
0 0 4 3 1 #" "
0 0 14 3 3 #"lox"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 3 #"lox"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"base"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"comb"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"contr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 3 #"lox"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"alt-fold"
0 0 4 3 1 #" "
0 0 14 3 4 #"comb"
0 0 4 3 1 #" "
0 0 14 3 4 #"cont"
0 0 4 3 1 #" "
0 0 14 3 4 #"base"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 3 #"lox"
0 0 22 3 6 #")))]))"
0 0 59 29 1 #"\n"
0           0
